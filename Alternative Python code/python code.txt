# import
  "source": [
    "# read the file into the different variables\n",
    "DMGs = pd.read_csv('DMGs.txt',sep=\" \")\n",
    "DEGs = pd.read_csv('DEGs.txt',sep=\" \")\n",
    "miRNA= pd.read_excel('miRNA.xlsx' )\n",
    "expression = pd.read_excel('expression.xlsx')\n",
    "DEMR_gene = pd.read_excel('DEMR_gene.xlsx')\n",
    "methylation = pd.read_excel('methylation.xlsx')\n",
    "target_miRNA = pd.read_csv(\"microrna_target.txt\", sep =\" \")"
   ]
#DP
"source": [
    "# Generate result using pandas\n",
    "status = []\n",
    "for value in DEGs[\"gene\"]:\n",
    "    if value == target_gene:\n",
    "        status.append(\"Yes\")\n",
    "    else:\n",
    "        status.append(\"No\")\n",
    "      \n",
    "DEGs[\"Status\"] = status\n",
    "DEGs = DEGs.loc[DEGs[\"Status\"] == \"Yes\"]\n",
    "print(DEGs)"
   ]

   "source": [
    "# Generate result using pandas\n",
    "status = []\n",
    "for value in DMGs[\"gene\"]:\n",
    "    if value == target_gene:\n",
    "        status.append(\"Yes\")\n",
    "    else:\n",
    "        status.append(\"No\")\n",
    "      \n",
    "DMGs[\"Status\"] = status\n",
    "DMGs = DMGs.loc[DMGs[\"Status\"] == \"Yes\"]\n",
    "print(DMGs)"
   ]

   "source": [
    "# Generate result using pandas\n",
    "status = []\n",
    "for value in DEMR_gene[\"gene\"]:\n",
    "    if value == target_gene:\n",
    "        status.append(\"Yes\")\n",
    "    else:\n",
    "        status.append(\"No\")\n",
    "      \n",
    "DEMR_gene[\"Status\"] = status \n",
    "DEMR_gene = DEMR_gene.loc[DEMR_gene[\"Status\"] == \"Yes\"]\n",
    "print(DEMR_gene)"
   ]
#gsdf
   "source": [
    "# filters the expression values that contains the target genes \n",
    "e = expression.loc[expression[\"gene\"] == target_gene]\n",
    "print(e)"
   ]

"source": [
    "#filters the value of methylation that contains the target genes\n",
    "m= methylation.loc[methylation[\"gene\"] == target_gene]\n",
    "print(m)"
   ]
?miRNA
#rename
 "source": [
    "#rename specific column names\n",
    "m.rename(columns = {'p-value':'p.value.cpg', 'logFC':'logFC.cpg'}, inplace = True)"
   ]

 "source": [
    "# Rename columns in dataframe miRNAexp\n",
    "# miRNAexp.rename(columns = {\"p.value.miRNA\":\"P.Value\",\"log.FC.miRNA\" = \"logFC\"}, inplace = True)\n",
    "miRNAexp"
   ]

#mrna to redo
   "source": [
    "# Extracts miRNA and its target_genes\n",
    "mir_gene= target_miRNA.loc[target_miRNA[\"gene\"] == target_gene]\n",
    "mir_gene = mir_gene.iloc[:,0]\n",
    "mir_gene.columns = [\"miRNA\"]\n",
    "print(mir_gene.head())"
   ]

# intersection !!!
   "source": [
    "#filters the value of methylation that contains the target genes\n",
    "mir = DEMR_gene.loc[DEMR_gene[\"gene\"] == target_gene]\n",
    "print(mir)"
   ]

#result
 "source": [
    "# exporting Result\n",
    "DEGs = pd.DataFrame(DEGs)\n",
    "DMGs = pd.DataFrame(DMGs)\n",
    "DEMR_gene = pd.DataFrame(DEMR_gene)\n",
    "e = pd.DataFrame(e)\n",
    "m = pd.DataFrame(m)\n",
    "mir_gene = pd.DataFrame(mir_gene)\n",
    "result = [DEGs,DMGs,DEMR_gene,e,m,mir_gene]\n",
    "\n",
    "GSD = pd.concat(result)\n",
    "print(GSD)\n",
    "\n",
#export
    "#exporting the data as csv \n",
    "# exporting the data as excel\n",
    "import os  \n",
    "os.makedirs('/home/careen/msepigenomics', exist_ok=True) \n",
    "with pd.ExcelWriter('/home/careen/msepigenomics/GSD.xlsx') as writer:  \n",
    "    GSD.to_excel(writer, sheet_name='Sheet_name_1', na_rep = \"NaN\")\n",
    "    "
   ]